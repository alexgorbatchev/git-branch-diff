// Generated by CoffeeScript 1.7.1
var Promise, R, addUncommittedFiles, argv, exec, filesToObject, getBranchName, getBranches, getChangedFilesInBranch, getCurrentBranch, getDiffWithBranch, getModifiedFiles, git, isSHA, repository, targetBranch;

R = require('ramda');

Promise = require('songbird');

exec = require('child_process').exec;

argv = require('yargs').usage("Returns list of files that are changed locally from specified remote branch.\nUsage: $0 -b branch -r repository").demand('b').alias('b', 'branch').describe('b', 'Branch against which to diff all local branches').demand('r').alias('r', 'repository').describe('r', 'Target repository').argv;

targetBranch = argv.branch, repository = argv.repository;

getBranchName = function(ref) {
  var match;
  match = ref.match(/^\w{40} refs\/heads\/(.*)$/);
  return (match != null) && match[1] || null;
};

isSHA = function(value) {
  return /^[0-9a-f]{40}$/.test(value);
};

filesToObject = R.curry(function(branch, files) {
  return {
    branch: branch,
    files: (files != null ? files.length : void 0) && files || null
  };
});

git = function(cmd) {
  return exec.promise("git " + cmd, {
    cwd: repository
  }).spread(function(stdout, stderr) {
    return stdout.split(/\n/g);
  }).then(R.filter(R.size))["catch"](function(err) {
    throw err.message + '\n\n' + cmd;
  });
};

getBranches = function() {
  return git('show-ref --heads').then(R.map(getBranchName));
};

getChangedFilesInBranch = function(branch) {
  return git("--no-pager log --pretty=%H --name-only " + targetBranch + ".." + branch).then(R.reject(isSHA)).then(R.uniq).then(filesToObject(branch));
};

getDiffWithBranch = R.curry(function(branch, file) {
  return git("--no-pager diff " + targetBranch + ".." + branch + " -- " + file).then(function(diff) {
    return {
      file: file,
      hasDiff: diff.length > 0
    };
  });
});

getCurrentBranch = function() {
  return git('rev-parse --abbrev-ref HEAD');
};

getModifiedFiles = function() {
  return git('ls-files -dm --exclude-standard');
};

addUncommittedFiles = function(list) {
  return Promise.all([getCurrentBranch(), getModifiedFiles()]).spread(function(currentBranch, modifiedFiles) {
    console.log(currentBranch, modifiedFiles);
    return list;
  });
};

getBranches().then(R.map(getChangedFilesInBranch)).then(Promise.all).then(R.filter(R.prop('files'))).then(R.map(function(_arg) {
  var branch, files;
  branch = _arg.branch, files = _arg.files;
  return Promise.all(files.map(getDiffWithBranch(branch))).then(R.filter(R.prop('hasDiff'))).then(R.pluck('file')).then(filesToObject(branch));
})).then(Promise.all).then(R.filter(R.prop('files'))).then(function(branches) {
  return process.stdout.write(JSON.stringify(branches, null, 2));
});
