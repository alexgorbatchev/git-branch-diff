// Generated by CoffeeScript 1.7.1
var Promise, R, exec, filesToObject, getBranchName, isSHA;

R = require('ramda');

Promise = require('songbird');

exec = require('child_process').exec;

getBranchName = function(ref) {
  var match;
  match = ref.match(/^\w{40} refs\/heads\/(.*)$/);
  return (match != null) && match[1] || null;
};

isSHA = function(value) {
  return /^[0-9a-f]{40}$/.test(value);
};

filesToObject = R.curry(function(branch, files) {
  return {
    branch: branch,
    files: (files != null ? files.length : void 0) && files || null
  };
});

module.exports = function(targetBranch, repository) {
  var getBranches, getChangedFilesInBranch, getDiffWithBranch, git;
  git = function(cmd) {
    return exec.promise("git " + cmd, {
      cwd: repository
    }).spread(function(stdout, stderr) {
      return stdout.split(/\n/g);
    }).then(R.filter(R.size))["catch"](function(err) {
      throw err.message + '\n\n' + cmd;
    });
  };
  getBranches = function() {
    return git('show-ref --heads').then(R.map(getBranchName));
  };
  getChangedFilesInBranch = function(branch) {
    return git("--no-pager log --pretty=%H --name-only " + targetBranch + ".." + branch).then(R.reject(isSHA)).then(R.uniq).then(filesToObject(branch));
  };
  getDiffWithBranch = R.curry(function(branch, file) {
    return git("--no-pager diff " + targetBranch + ".." + branch + " -- " + file).then(function(diff) {
      return {
        file: file,
        hasDiff: diff.length > 0
      };
    });
  });
  return getBranches().then(R.map(getChangedFilesInBranch)).then(Promise.all).then(R.filter(R.prop('files'))).then(R.map(function(_arg) {
    var branch, files;
    branch = _arg.branch, files = _arg.files;
    return Promise.all(files.map(getDiffWithBranch(branch))).then(R.filter(R.prop('hasDiff'))).then(R.pluck('file')).then(filesToObject(branch));
  })).then(Promise.all).then(R.filter(R.prop('files')));
};
